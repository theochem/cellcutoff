# -*- coding: utf-8 -*-
# CellCutoff is a library for periodic boundary conditions and real-space cutoff calculations.
# Copyright (C) 2017 The CellCutoff Development Team
#
# This file is part of CellCutoff.
#
# CellCutoff is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# CellCutoff is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --
"""Get the version string from the git tag."""

from __future__ import print_function

import os
import sys
import subprocess


__all__ = ['get_gitversion']


VERSION_TEMPLATE = """\
\"""Do not edit this file, versioning is governed by ``git describe --tags`` and ``setup.py``.\"""
__version__ = '{}'
"""


def get_gitversion(pypkg, verbose):
    """Try to get the version from git describe.

    Parameters
    ----------
    pypkg : str
        The name of the python package.
    vernose : bool
        If True, some info is printed on screen.

    Returns
    -------
    version : str
        The version.

    """
    version = None
    try:
        if verbose:
            print('Trying to get the version from git describe')
        git_describe = subprocess.check_output(['git', 'describe', '--tags'])
        version_words = git_describe.decode('utf-8').strip().split('-')
        version = version_words[0]
        if len(version_words) > 1:
            version += '.post' + version_words[1]
        if verbose:
            print('Version from git describe: {}'.format(version))
    except (subprocess.CalledProcessError, OSError):
        pass

    # Interact with version.py
    fn_version = os.path.join(os.path.dirname(__file__), '..', pypkg, 'version.py')
    if version is None:
        if verbose:
            print('Trying to get the version from {}',format(fn_version))
        # Try to load the git version tag from version.py
        try:
            with open(fn_version, 'r') as f:
                version = f.read().split('=')[-1].replace('\'', '').strip()
        except IOError:
            print('Could not determine version. Giving up.')
            sys.exit(1)
        if verbose:
            print('Version according to {}: {}'.format(fn_version, version))
    else:
        # Store the git version tag in version.py
        if verbose:
            print('Writing version to {}'.format(fn_version))
        with open(fn_version, 'w') as f:
            f.write(VERSION_TEMPLATE.format(version))

    return version


def parse_args():
    """Parse the command-line arguments."""
    from argparse import ArgumentParser
    parser = ArgumentParser('Determine version string from git tag')
    parser.add_argument('pypkg', help='The name of the python package.')
    parser.add_argument('--part', default='all', help='Part of the version string to get',
                        choices=['all', 'major', 'minor', 'patch'])
    args = parser.parse_args()
    return args.pypkg, args.part


def main():
    """Main program."""
    pypkg, part = parse_args()
    version = get_gitversion(sys.argv[1], False)
    if part != 'all':
        part = {'major': 0, 'minor': 1, 'patch': 2}[part]
        version = version.split('.', 2)[part]
    print(version)


if __name__ == '__main__':
    main()
